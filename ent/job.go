// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/retr0-kernel/worker-mesh/ent/job"
)

// Job is the model entity for the Job schema.
type Job struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// JobID holds the value of the "job_id" field.
	JobID string `json:"job_id,omitempty"`
	// TargetNodeID holds the value of the "target_node_id" field.
	TargetNodeID string `json:"target_node_id,omitempty"`
	// Command holds the value of the "command" field.
	Command string `json:"command,omitempty"`
	// Env holds the value of the "env" field.
	Env map[string]string `json:"env,omitempty"`
	// TimeoutSeconds holds the value of the "timeout_seconds" field.
	TimeoutSeconds int32 `json:"timeout_seconds,omitempty"`
	// Status holds the value of the "status" field.
	Status string `json:"status,omitempty"`
	// CreatedByNode holds the value of the "created_by_node" field.
	CreatedByNode string `json:"created_by_node,omitempty"`
	// ExitCode holds the value of the "exit_code" field.
	ExitCode int32 `json:"exit_code,omitempty"`
	// Stdout holds the value of the "stdout" field.
	Stdout string `json:"stdout,omitempty"`
	// Stderr holds the value of the "stderr" field.
	Stderr string `json:"stderr,omitempty"`
	// ErrorMessage holds the value of the "error_message" field.
	ErrorMessage string `json:"error_message,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// StartedAt holds the value of the "started_at" field.
	StartedAt time.Time `json:"started_at,omitempty"`
	// FinishedAt holds the value of the "finished_at" field.
	FinishedAt time.Time `json:"finished_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt    time.Time `json:"updated_at,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Job) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case job.FieldEnv:
			values[i] = new([]byte)
		case job.FieldID, job.FieldTimeoutSeconds, job.FieldExitCode:
			values[i] = new(sql.NullInt64)
		case job.FieldJobID, job.FieldTargetNodeID, job.FieldCommand, job.FieldStatus, job.FieldCreatedByNode, job.FieldStdout, job.FieldStderr, job.FieldErrorMessage:
			values[i] = new(sql.NullString)
		case job.FieldCreatedAt, job.FieldStartedAt, job.FieldFinishedAt, job.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Job fields.
func (j *Job) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case job.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			j.ID = int(value.Int64)
		case job.FieldJobID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field job_id", values[i])
			} else if value.Valid {
				j.JobID = value.String
			}
		case job.FieldTargetNodeID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field target_node_id", values[i])
			} else if value.Valid {
				j.TargetNodeID = value.String
			}
		case job.FieldCommand:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field command", values[i])
			} else if value.Valid {
				j.Command = value.String
			}
		case job.FieldEnv:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field env", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &j.Env); err != nil {
					return fmt.Errorf("unmarshal field env: %w", err)
				}
			}
		case job.FieldTimeoutSeconds:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field timeout_seconds", values[i])
			} else if value.Valid {
				j.TimeoutSeconds = int32(value.Int64)
			}
		case job.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				j.Status = value.String
			}
		case job.FieldCreatedByNode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field created_by_node", values[i])
			} else if value.Valid {
				j.CreatedByNode = value.String
			}
		case job.FieldExitCode:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field exit_code", values[i])
			} else if value.Valid {
				j.ExitCode = int32(value.Int64)
			}
		case job.FieldStdout:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field stdout", values[i])
			} else if value.Valid {
				j.Stdout = value.String
			}
		case job.FieldStderr:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field stderr", values[i])
			} else if value.Valid {
				j.Stderr = value.String
			}
		case job.FieldErrorMessage:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field error_message", values[i])
			} else if value.Valid {
				j.ErrorMessage = value.String
			}
		case job.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				j.CreatedAt = value.Time
			}
		case job.FieldStartedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field started_at", values[i])
			} else if value.Valid {
				j.StartedAt = value.Time
			}
		case job.FieldFinishedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field finished_at", values[i])
			} else if value.Valid {
				j.FinishedAt = value.Time
			}
		case job.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				j.UpdatedAt = value.Time
			}
		default:
			j.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Job.
// This includes values selected through modifiers, order, etc.
func (j *Job) Value(name string) (ent.Value, error) {
	return j.selectValues.Get(name)
}

// Update returns a builder for updating this Job.
// Note that you need to call Job.Unwrap() before calling this method if this Job
// was returned from a transaction, and the transaction was committed or rolled back.
func (j *Job) Update() *JobUpdateOne {
	return NewJobClient(j.config).UpdateOne(j)
}

// Unwrap unwraps the Job entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (j *Job) Unwrap() *Job {
	_tx, ok := j.config.driver.(*txDriver)
	if !ok {
		panic("ent: Job is not a transactional entity")
	}
	j.config.driver = _tx.drv
	return j
}

// String implements the fmt.Stringer.
func (j *Job) String() string {
	var builder strings.Builder
	builder.WriteString("Job(")
	builder.WriteString(fmt.Sprintf("id=%v, ", j.ID))
	builder.WriteString("job_id=")
	builder.WriteString(j.JobID)
	builder.WriteString(", ")
	builder.WriteString("target_node_id=")
	builder.WriteString(j.TargetNodeID)
	builder.WriteString(", ")
	builder.WriteString("command=")
	builder.WriteString(j.Command)
	builder.WriteString(", ")
	builder.WriteString("env=")
	builder.WriteString(fmt.Sprintf("%v", j.Env))
	builder.WriteString(", ")
	builder.WriteString("timeout_seconds=")
	builder.WriteString(fmt.Sprintf("%v", j.TimeoutSeconds))
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(j.Status)
	builder.WriteString(", ")
	builder.WriteString("created_by_node=")
	builder.WriteString(j.CreatedByNode)
	builder.WriteString(", ")
	builder.WriteString("exit_code=")
	builder.WriteString(fmt.Sprintf("%v", j.ExitCode))
	builder.WriteString(", ")
	builder.WriteString("stdout=")
	builder.WriteString(j.Stdout)
	builder.WriteString(", ")
	builder.WriteString("stderr=")
	builder.WriteString(j.Stderr)
	builder.WriteString(", ")
	builder.WriteString("error_message=")
	builder.WriteString(j.ErrorMessage)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(j.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("started_at=")
	builder.WriteString(j.StartedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("finished_at=")
	builder.WriteString(j.FinishedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(j.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Jobs is a parsable slice of Job.
type Jobs []*Job
