// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/retr0-kernel/worker-mesh/ent/workernode"
)

// WorkerNodeCreate is the builder for creating a WorkerNode entity.
type WorkerNodeCreate struct {
	config
	mutation *WorkerNodeMutation
	hooks    []Hook
}

// SetNodeID sets the "node_id" field.
func (wnc *WorkerNodeCreate) SetNodeID(s string) *WorkerNodeCreate {
	wnc.mutation.SetNodeID(s)
	return wnc
}

// SetAddress sets the "address" field.
func (wnc *WorkerNodeCreate) SetAddress(s string) *WorkerNodeCreate {
	wnc.mutation.SetAddress(s)
	return wnc
}

// SetStatus sets the "status" field.
func (wnc *WorkerNodeCreate) SetStatus(s string) *WorkerNodeCreate {
	wnc.mutation.SetStatus(s)
	return wnc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (wnc *WorkerNodeCreate) SetNillableStatus(s *string) *WorkerNodeCreate {
	if s != nil {
		wnc.SetStatus(*s)
	}
	return wnc
}

// SetLastHeartbeat sets the "last_heartbeat" field.
func (wnc *WorkerNodeCreate) SetLastHeartbeat(t time.Time) *WorkerNodeCreate {
	wnc.mutation.SetLastHeartbeat(t)
	return wnc
}

// SetNillableLastHeartbeat sets the "last_heartbeat" field if the given value is not nil.
func (wnc *WorkerNodeCreate) SetNillableLastHeartbeat(t *time.Time) *WorkerNodeCreate {
	if t != nil {
		wnc.SetLastHeartbeat(*t)
	}
	return wnc
}

// SetMetadata sets the "metadata" field.
func (wnc *WorkerNodeCreate) SetMetadata(m map[string]string) *WorkerNodeCreate {
	wnc.mutation.SetMetadata(m)
	return wnc
}

// SetVersion sets the "version" field.
func (wnc *WorkerNodeCreate) SetVersion(s string) *WorkerNodeCreate {
	wnc.mutation.SetVersion(s)
	return wnc
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (wnc *WorkerNodeCreate) SetNillableVersion(s *string) *WorkerNodeCreate {
	if s != nil {
		wnc.SetVersion(*s)
	}
	return wnc
}

// SetCreatedAt sets the "created_at" field.
func (wnc *WorkerNodeCreate) SetCreatedAt(t time.Time) *WorkerNodeCreate {
	wnc.mutation.SetCreatedAt(t)
	return wnc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (wnc *WorkerNodeCreate) SetNillableCreatedAt(t *time.Time) *WorkerNodeCreate {
	if t != nil {
		wnc.SetCreatedAt(*t)
	}
	return wnc
}

// SetUpdatedAt sets the "updated_at" field.
func (wnc *WorkerNodeCreate) SetUpdatedAt(t time.Time) *WorkerNodeCreate {
	wnc.mutation.SetUpdatedAt(t)
	return wnc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (wnc *WorkerNodeCreate) SetNillableUpdatedAt(t *time.Time) *WorkerNodeCreate {
	if t != nil {
		wnc.SetUpdatedAt(*t)
	}
	return wnc
}

// Mutation returns the WorkerNodeMutation object of the builder.
func (wnc *WorkerNodeCreate) Mutation() *WorkerNodeMutation {
	return wnc.mutation
}

// Save creates the WorkerNode in the database.
func (wnc *WorkerNodeCreate) Save(ctx context.Context) (*WorkerNode, error) {
	wnc.defaults()
	return withHooks(ctx, wnc.sqlSave, wnc.mutation, wnc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (wnc *WorkerNodeCreate) SaveX(ctx context.Context) *WorkerNode {
	v, err := wnc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (wnc *WorkerNodeCreate) Exec(ctx context.Context) error {
	_, err := wnc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wnc *WorkerNodeCreate) ExecX(ctx context.Context) {
	if err := wnc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (wnc *WorkerNodeCreate) defaults() {
	if _, ok := wnc.mutation.Status(); !ok {
		v := workernode.DefaultStatus
		wnc.mutation.SetStatus(v)
	}
	if _, ok := wnc.mutation.LastHeartbeat(); !ok {
		v := workernode.DefaultLastHeartbeat()
		wnc.mutation.SetLastHeartbeat(v)
	}
	if _, ok := wnc.mutation.Version(); !ok {
		v := workernode.DefaultVersion
		wnc.mutation.SetVersion(v)
	}
	if _, ok := wnc.mutation.CreatedAt(); !ok {
		v := workernode.DefaultCreatedAt()
		wnc.mutation.SetCreatedAt(v)
	}
	if _, ok := wnc.mutation.UpdatedAt(); !ok {
		v := workernode.DefaultUpdatedAt()
		wnc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (wnc *WorkerNodeCreate) check() error {
	if _, ok := wnc.mutation.NodeID(); !ok {
		return &ValidationError{Name: "node_id", err: errors.New(`ent: missing required field "WorkerNode.node_id"`)}
	}
	if _, ok := wnc.mutation.Address(); !ok {
		return &ValidationError{Name: "address", err: errors.New(`ent: missing required field "WorkerNode.address"`)}
	}
	if _, ok := wnc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "WorkerNode.status"`)}
	}
	if _, ok := wnc.mutation.LastHeartbeat(); !ok {
		return &ValidationError{Name: "last_heartbeat", err: errors.New(`ent: missing required field "WorkerNode.last_heartbeat"`)}
	}
	if _, ok := wnc.mutation.Version(); !ok {
		return &ValidationError{Name: "version", err: errors.New(`ent: missing required field "WorkerNode.version"`)}
	}
	if _, ok := wnc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "WorkerNode.created_at"`)}
	}
	if _, ok := wnc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "WorkerNode.updated_at"`)}
	}
	return nil
}

func (wnc *WorkerNodeCreate) sqlSave(ctx context.Context) (*WorkerNode, error) {
	if err := wnc.check(); err != nil {
		return nil, err
	}
	_node, _spec := wnc.createSpec()
	if err := sqlgraph.CreateNode(ctx, wnc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	wnc.mutation.id = &_node.ID
	wnc.mutation.done = true
	return _node, nil
}

func (wnc *WorkerNodeCreate) createSpec() (*WorkerNode, *sqlgraph.CreateSpec) {
	var (
		_node = &WorkerNode{config: wnc.config}
		_spec = sqlgraph.NewCreateSpec(workernode.Table, sqlgraph.NewFieldSpec(workernode.FieldID, field.TypeInt))
	)
	if value, ok := wnc.mutation.NodeID(); ok {
		_spec.SetField(workernode.FieldNodeID, field.TypeString, value)
		_node.NodeID = value
	}
	if value, ok := wnc.mutation.Address(); ok {
		_spec.SetField(workernode.FieldAddress, field.TypeString, value)
		_node.Address = value
	}
	if value, ok := wnc.mutation.Status(); ok {
		_spec.SetField(workernode.FieldStatus, field.TypeString, value)
		_node.Status = value
	}
	if value, ok := wnc.mutation.LastHeartbeat(); ok {
		_spec.SetField(workernode.FieldLastHeartbeat, field.TypeTime, value)
		_node.LastHeartbeat = value
	}
	if value, ok := wnc.mutation.Metadata(); ok {
		_spec.SetField(workernode.FieldMetadata, field.TypeJSON, value)
		_node.Metadata = value
	}
	if value, ok := wnc.mutation.Version(); ok {
		_spec.SetField(workernode.FieldVersion, field.TypeString, value)
		_node.Version = value
	}
	if value, ok := wnc.mutation.CreatedAt(); ok {
		_spec.SetField(workernode.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := wnc.mutation.UpdatedAt(); ok {
		_spec.SetField(workernode.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	return _node, _spec
}

// WorkerNodeCreateBulk is the builder for creating many WorkerNode entities in bulk.
type WorkerNodeCreateBulk struct {
	config
	err      error
	builders []*WorkerNodeCreate
}

// Save creates the WorkerNode entities in the database.
func (wncb *WorkerNodeCreateBulk) Save(ctx context.Context) ([]*WorkerNode, error) {
	if wncb.err != nil {
		return nil, wncb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(wncb.builders))
	nodes := make([]*WorkerNode, len(wncb.builders))
	mutators := make([]Mutator, len(wncb.builders))
	for i := range wncb.builders {
		func(i int, root context.Context) {
			builder := wncb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*WorkerNodeMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, wncb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, wncb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, wncb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (wncb *WorkerNodeCreateBulk) SaveX(ctx context.Context) []*WorkerNode {
	v, err := wncb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (wncb *WorkerNodeCreateBulk) Exec(ctx context.Context) error {
	_, err := wncb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wncb *WorkerNodeCreateBulk) ExecX(ctx context.Context) {
	if err := wncb.Exec(ctx); err != nil {
		panic(err)
	}
}
