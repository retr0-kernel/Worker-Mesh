// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/retr0-kernel/worker-mesh/ent/workernode"
)

// WorkerNode is the model entity for the WorkerNode schema.
type WorkerNode struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// NodeID holds the value of the "node_id" field.
	NodeID string `json:"node_id,omitempty"`
	// Address holds the value of the "address" field.
	Address string `json:"address,omitempty"`
	// Status holds the value of the "status" field.
	Status string `json:"status,omitempty"`
	// LastHeartbeat holds the value of the "last_heartbeat" field.
	LastHeartbeat time.Time `json:"last_heartbeat,omitempty"`
	// Metadata holds the value of the "metadata" field.
	Metadata map[string]string `json:"metadata,omitempty"`
	// Version holds the value of the "version" field.
	Version string `json:"version,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt    time.Time `json:"updated_at,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*WorkerNode) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case workernode.FieldMetadata:
			values[i] = new([]byte)
		case workernode.FieldID:
			values[i] = new(sql.NullInt64)
		case workernode.FieldNodeID, workernode.FieldAddress, workernode.FieldStatus, workernode.FieldVersion:
			values[i] = new(sql.NullString)
		case workernode.FieldLastHeartbeat, workernode.FieldCreatedAt, workernode.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the WorkerNode fields.
func (wn *WorkerNode) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case workernode.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			wn.ID = int(value.Int64)
		case workernode.FieldNodeID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field node_id", values[i])
			} else if value.Valid {
				wn.NodeID = value.String
			}
		case workernode.FieldAddress:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field address", values[i])
			} else if value.Valid {
				wn.Address = value.String
			}
		case workernode.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				wn.Status = value.String
			}
		case workernode.FieldLastHeartbeat:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field last_heartbeat", values[i])
			} else if value.Valid {
				wn.LastHeartbeat = value.Time
			}
		case workernode.FieldMetadata:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field metadata", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &wn.Metadata); err != nil {
					return fmt.Errorf("unmarshal field metadata: %w", err)
				}
			}
		case workernode.FieldVersion:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field version", values[i])
			} else if value.Valid {
				wn.Version = value.String
			}
		case workernode.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				wn.CreatedAt = value.Time
			}
		case workernode.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				wn.UpdatedAt = value.Time
			}
		default:
			wn.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the WorkerNode.
// This includes values selected through modifiers, order, etc.
func (wn *WorkerNode) Value(name string) (ent.Value, error) {
	return wn.selectValues.Get(name)
}

// Update returns a builder for updating this WorkerNode.
// Note that you need to call WorkerNode.Unwrap() before calling this method if this WorkerNode
// was returned from a transaction, and the transaction was committed or rolled back.
func (wn *WorkerNode) Update() *WorkerNodeUpdateOne {
	return NewWorkerNodeClient(wn.config).UpdateOne(wn)
}

// Unwrap unwraps the WorkerNode entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (wn *WorkerNode) Unwrap() *WorkerNode {
	_tx, ok := wn.config.driver.(*txDriver)
	if !ok {
		panic("ent: WorkerNode is not a transactional entity")
	}
	wn.config.driver = _tx.drv
	return wn
}

// String implements the fmt.Stringer.
func (wn *WorkerNode) String() string {
	var builder strings.Builder
	builder.WriteString("WorkerNode(")
	builder.WriteString(fmt.Sprintf("id=%v, ", wn.ID))
	builder.WriteString("node_id=")
	builder.WriteString(wn.NodeID)
	builder.WriteString(", ")
	builder.WriteString("address=")
	builder.WriteString(wn.Address)
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(wn.Status)
	builder.WriteString(", ")
	builder.WriteString("last_heartbeat=")
	builder.WriteString(wn.LastHeartbeat.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("metadata=")
	builder.WriteString(fmt.Sprintf("%v", wn.Metadata))
	builder.WriteString(", ")
	builder.WriteString("version=")
	builder.WriteString(wn.Version)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(wn.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(wn.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// WorkerNodes is a parsable slice of WorkerNode.
type WorkerNodes []*WorkerNode
