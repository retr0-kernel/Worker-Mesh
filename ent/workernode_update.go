// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/retr0-kernel/worker-mesh/ent/predicate"
	"github.com/retr0-kernel/worker-mesh/ent/workernode"
)

// WorkerNodeUpdate is the builder for updating WorkerNode entities.
type WorkerNodeUpdate struct {
	config
	hooks    []Hook
	mutation *WorkerNodeMutation
}

// Where appends a list predicates to the WorkerNodeUpdate builder.
func (wnu *WorkerNodeUpdate) Where(ps ...predicate.WorkerNode) *WorkerNodeUpdate {
	wnu.mutation.Where(ps...)
	return wnu
}

// SetNodeID sets the "node_id" field.
func (wnu *WorkerNodeUpdate) SetNodeID(s string) *WorkerNodeUpdate {
	wnu.mutation.SetNodeID(s)
	return wnu
}

// SetNillableNodeID sets the "node_id" field if the given value is not nil.
func (wnu *WorkerNodeUpdate) SetNillableNodeID(s *string) *WorkerNodeUpdate {
	if s != nil {
		wnu.SetNodeID(*s)
	}
	return wnu
}

// SetAddress sets the "address" field.
func (wnu *WorkerNodeUpdate) SetAddress(s string) *WorkerNodeUpdate {
	wnu.mutation.SetAddress(s)
	return wnu
}

// SetNillableAddress sets the "address" field if the given value is not nil.
func (wnu *WorkerNodeUpdate) SetNillableAddress(s *string) *WorkerNodeUpdate {
	if s != nil {
		wnu.SetAddress(*s)
	}
	return wnu
}

// SetStatus sets the "status" field.
func (wnu *WorkerNodeUpdate) SetStatus(s string) *WorkerNodeUpdate {
	wnu.mutation.SetStatus(s)
	return wnu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (wnu *WorkerNodeUpdate) SetNillableStatus(s *string) *WorkerNodeUpdate {
	if s != nil {
		wnu.SetStatus(*s)
	}
	return wnu
}

// SetLastHeartbeat sets the "last_heartbeat" field.
func (wnu *WorkerNodeUpdate) SetLastHeartbeat(t time.Time) *WorkerNodeUpdate {
	wnu.mutation.SetLastHeartbeat(t)
	return wnu
}

// SetNillableLastHeartbeat sets the "last_heartbeat" field if the given value is not nil.
func (wnu *WorkerNodeUpdate) SetNillableLastHeartbeat(t *time.Time) *WorkerNodeUpdate {
	if t != nil {
		wnu.SetLastHeartbeat(*t)
	}
	return wnu
}

// SetMetadata sets the "metadata" field.
func (wnu *WorkerNodeUpdate) SetMetadata(m map[string]string) *WorkerNodeUpdate {
	wnu.mutation.SetMetadata(m)
	return wnu
}

// ClearMetadata clears the value of the "metadata" field.
func (wnu *WorkerNodeUpdate) ClearMetadata() *WorkerNodeUpdate {
	wnu.mutation.ClearMetadata()
	return wnu
}

// SetVersion sets the "version" field.
func (wnu *WorkerNodeUpdate) SetVersion(s string) *WorkerNodeUpdate {
	wnu.mutation.SetVersion(s)
	return wnu
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (wnu *WorkerNodeUpdate) SetNillableVersion(s *string) *WorkerNodeUpdate {
	if s != nil {
		wnu.SetVersion(*s)
	}
	return wnu
}

// SetUpdatedAt sets the "updated_at" field.
func (wnu *WorkerNodeUpdate) SetUpdatedAt(t time.Time) *WorkerNodeUpdate {
	wnu.mutation.SetUpdatedAt(t)
	return wnu
}

// Mutation returns the WorkerNodeMutation object of the builder.
func (wnu *WorkerNodeUpdate) Mutation() *WorkerNodeMutation {
	return wnu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (wnu *WorkerNodeUpdate) Save(ctx context.Context) (int, error) {
	wnu.defaults()
	return withHooks(ctx, wnu.sqlSave, wnu.mutation, wnu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (wnu *WorkerNodeUpdate) SaveX(ctx context.Context) int {
	affected, err := wnu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (wnu *WorkerNodeUpdate) Exec(ctx context.Context) error {
	_, err := wnu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wnu *WorkerNodeUpdate) ExecX(ctx context.Context) {
	if err := wnu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (wnu *WorkerNodeUpdate) defaults() {
	if _, ok := wnu.mutation.UpdatedAt(); !ok {
		v := workernode.UpdateDefaultUpdatedAt()
		wnu.mutation.SetUpdatedAt(v)
	}
}

func (wnu *WorkerNodeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(workernode.Table, workernode.Columns, sqlgraph.NewFieldSpec(workernode.FieldID, field.TypeInt))
	if ps := wnu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := wnu.mutation.NodeID(); ok {
		_spec.SetField(workernode.FieldNodeID, field.TypeString, value)
	}
	if value, ok := wnu.mutation.Address(); ok {
		_spec.SetField(workernode.FieldAddress, field.TypeString, value)
	}
	if value, ok := wnu.mutation.Status(); ok {
		_spec.SetField(workernode.FieldStatus, field.TypeString, value)
	}
	if value, ok := wnu.mutation.LastHeartbeat(); ok {
		_spec.SetField(workernode.FieldLastHeartbeat, field.TypeTime, value)
	}
	if value, ok := wnu.mutation.Metadata(); ok {
		_spec.SetField(workernode.FieldMetadata, field.TypeJSON, value)
	}
	if wnu.mutation.MetadataCleared() {
		_spec.ClearField(workernode.FieldMetadata, field.TypeJSON)
	}
	if value, ok := wnu.mutation.Version(); ok {
		_spec.SetField(workernode.FieldVersion, field.TypeString, value)
	}
	if value, ok := wnu.mutation.UpdatedAt(); ok {
		_spec.SetField(workernode.FieldUpdatedAt, field.TypeTime, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, wnu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{workernode.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	wnu.mutation.done = true
	return n, nil
}

// WorkerNodeUpdateOne is the builder for updating a single WorkerNode entity.
type WorkerNodeUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *WorkerNodeMutation
}

// SetNodeID sets the "node_id" field.
func (wnuo *WorkerNodeUpdateOne) SetNodeID(s string) *WorkerNodeUpdateOne {
	wnuo.mutation.SetNodeID(s)
	return wnuo
}

// SetNillableNodeID sets the "node_id" field if the given value is not nil.
func (wnuo *WorkerNodeUpdateOne) SetNillableNodeID(s *string) *WorkerNodeUpdateOne {
	if s != nil {
		wnuo.SetNodeID(*s)
	}
	return wnuo
}

// SetAddress sets the "address" field.
func (wnuo *WorkerNodeUpdateOne) SetAddress(s string) *WorkerNodeUpdateOne {
	wnuo.mutation.SetAddress(s)
	return wnuo
}

// SetNillableAddress sets the "address" field if the given value is not nil.
func (wnuo *WorkerNodeUpdateOne) SetNillableAddress(s *string) *WorkerNodeUpdateOne {
	if s != nil {
		wnuo.SetAddress(*s)
	}
	return wnuo
}

// SetStatus sets the "status" field.
func (wnuo *WorkerNodeUpdateOne) SetStatus(s string) *WorkerNodeUpdateOne {
	wnuo.mutation.SetStatus(s)
	return wnuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (wnuo *WorkerNodeUpdateOne) SetNillableStatus(s *string) *WorkerNodeUpdateOne {
	if s != nil {
		wnuo.SetStatus(*s)
	}
	return wnuo
}

// SetLastHeartbeat sets the "last_heartbeat" field.
func (wnuo *WorkerNodeUpdateOne) SetLastHeartbeat(t time.Time) *WorkerNodeUpdateOne {
	wnuo.mutation.SetLastHeartbeat(t)
	return wnuo
}

// SetNillableLastHeartbeat sets the "last_heartbeat" field if the given value is not nil.
func (wnuo *WorkerNodeUpdateOne) SetNillableLastHeartbeat(t *time.Time) *WorkerNodeUpdateOne {
	if t != nil {
		wnuo.SetLastHeartbeat(*t)
	}
	return wnuo
}

// SetMetadata sets the "metadata" field.
func (wnuo *WorkerNodeUpdateOne) SetMetadata(m map[string]string) *WorkerNodeUpdateOne {
	wnuo.mutation.SetMetadata(m)
	return wnuo
}

// ClearMetadata clears the value of the "metadata" field.
func (wnuo *WorkerNodeUpdateOne) ClearMetadata() *WorkerNodeUpdateOne {
	wnuo.mutation.ClearMetadata()
	return wnuo
}

// SetVersion sets the "version" field.
func (wnuo *WorkerNodeUpdateOne) SetVersion(s string) *WorkerNodeUpdateOne {
	wnuo.mutation.SetVersion(s)
	return wnuo
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (wnuo *WorkerNodeUpdateOne) SetNillableVersion(s *string) *WorkerNodeUpdateOne {
	if s != nil {
		wnuo.SetVersion(*s)
	}
	return wnuo
}

// SetUpdatedAt sets the "updated_at" field.
func (wnuo *WorkerNodeUpdateOne) SetUpdatedAt(t time.Time) *WorkerNodeUpdateOne {
	wnuo.mutation.SetUpdatedAt(t)
	return wnuo
}

// Mutation returns the WorkerNodeMutation object of the builder.
func (wnuo *WorkerNodeUpdateOne) Mutation() *WorkerNodeMutation {
	return wnuo.mutation
}

// Where appends a list predicates to the WorkerNodeUpdate builder.
func (wnuo *WorkerNodeUpdateOne) Where(ps ...predicate.WorkerNode) *WorkerNodeUpdateOne {
	wnuo.mutation.Where(ps...)
	return wnuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (wnuo *WorkerNodeUpdateOne) Select(field string, fields ...string) *WorkerNodeUpdateOne {
	wnuo.fields = append([]string{field}, fields...)
	return wnuo
}

// Save executes the query and returns the updated WorkerNode entity.
func (wnuo *WorkerNodeUpdateOne) Save(ctx context.Context) (*WorkerNode, error) {
	wnuo.defaults()
	return withHooks(ctx, wnuo.sqlSave, wnuo.mutation, wnuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (wnuo *WorkerNodeUpdateOne) SaveX(ctx context.Context) *WorkerNode {
	node, err := wnuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (wnuo *WorkerNodeUpdateOne) Exec(ctx context.Context) error {
	_, err := wnuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wnuo *WorkerNodeUpdateOne) ExecX(ctx context.Context) {
	if err := wnuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (wnuo *WorkerNodeUpdateOne) defaults() {
	if _, ok := wnuo.mutation.UpdatedAt(); !ok {
		v := workernode.UpdateDefaultUpdatedAt()
		wnuo.mutation.SetUpdatedAt(v)
	}
}

func (wnuo *WorkerNodeUpdateOne) sqlSave(ctx context.Context) (_node *WorkerNode, err error) {
	_spec := sqlgraph.NewUpdateSpec(workernode.Table, workernode.Columns, sqlgraph.NewFieldSpec(workernode.FieldID, field.TypeInt))
	id, ok := wnuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "WorkerNode.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := wnuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, workernode.FieldID)
		for _, f := range fields {
			if !workernode.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != workernode.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := wnuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := wnuo.mutation.NodeID(); ok {
		_spec.SetField(workernode.FieldNodeID, field.TypeString, value)
	}
	if value, ok := wnuo.mutation.Address(); ok {
		_spec.SetField(workernode.FieldAddress, field.TypeString, value)
	}
	if value, ok := wnuo.mutation.Status(); ok {
		_spec.SetField(workernode.FieldStatus, field.TypeString, value)
	}
	if value, ok := wnuo.mutation.LastHeartbeat(); ok {
		_spec.SetField(workernode.FieldLastHeartbeat, field.TypeTime, value)
	}
	if value, ok := wnuo.mutation.Metadata(); ok {
		_spec.SetField(workernode.FieldMetadata, field.TypeJSON, value)
	}
	if wnuo.mutation.MetadataCleared() {
		_spec.ClearField(workernode.FieldMetadata, field.TypeJSON)
	}
	if value, ok := wnuo.mutation.Version(); ok {
		_spec.SetField(workernode.FieldVersion, field.TypeString, value)
	}
	if value, ok := wnuo.mutation.UpdatedAt(); ok {
		_spec.SetField(workernode.FieldUpdatedAt, field.TypeTime, value)
	}
	_node = &WorkerNode{config: wnuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, wnuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{workernode.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	wnuo.mutation.done = true
	return _node, nil
}
