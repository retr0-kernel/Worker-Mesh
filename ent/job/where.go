// Code generated by ent, DO NOT EDIT.

package job

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/retr0-kernel/worker-mesh/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Job {
	return predicate.Job(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Job {
	return predicate.Job(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Job {
	return predicate.Job(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Job {
	return predicate.Job(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Job {
	return predicate.Job(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Job {
	return predicate.Job(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Job {
	return predicate.Job(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Job {
	return predicate.Job(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Job {
	return predicate.Job(sql.FieldLTE(FieldID, id))
}

// JobID applies equality check predicate on the "job_id" field. It's identical to JobIDEQ.
func JobID(v string) predicate.Job {
	return predicate.Job(sql.FieldEQ(FieldJobID, v))
}

// TargetNodeID applies equality check predicate on the "target_node_id" field. It's identical to TargetNodeIDEQ.
func TargetNodeID(v string) predicate.Job {
	return predicate.Job(sql.FieldEQ(FieldTargetNodeID, v))
}

// Command applies equality check predicate on the "command" field. It's identical to CommandEQ.
func Command(v string) predicate.Job {
	return predicate.Job(sql.FieldEQ(FieldCommand, v))
}

// TimeoutSeconds applies equality check predicate on the "timeout_seconds" field. It's identical to TimeoutSecondsEQ.
func TimeoutSeconds(v int32) predicate.Job {
	return predicate.Job(sql.FieldEQ(FieldTimeoutSeconds, v))
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v string) predicate.Job {
	return predicate.Job(sql.FieldEQ(FieldStatus, v))
}

// CreatedByNode applies equality check predicate on the "created_by_node" field. It's identical to CreatedByNodeEQ.
func CreatedByNode(v string) predicate.Job {
	return predicate.Job(sql.FieldEQ(FieldCreatedByNode, v))
}

// ExitCode applies equality check predicate on the "exit_code" field. It's identical to ExitCodeEQ.
func ExitCode(v int32) predicate.Job {
	return predicate.Job(sql.FieldEQ(FieldExitCode, v))
}

// Stdout applies equality check predicate on the "stdout" field. It's identical to StdoutEQ.
func Stdout(v string) predicate.Job {
	return predicate.Job(sql.FieldEQ(FieldStdout, v))
}

// Stderr applies equality check predicate on the "stderr" field. It's identical to StderrEQ.
func Stderr(v string) predicate.Job {
	return predicate.Job(sql.FieldEQ(FieldStderr, v))
}

// ErrorMessage applies equality check predicate on the "error_message" field. It's identical to ErrorMessageEQ.
func ErrorMessage(v string) predicate.Job {
	return predicate.Job(sql.FieldEQ(FieldErrorMessage, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Job {
	return predicate.Job(sql.FieldEQ(FieldCreatedAt, v))
}

// StartedAt applies equality check predicate on the "started_at" field. It's identical to StartedAtEQ.
func StartedAt(v time.Time) predicate.Job {
	return predicate.Job(sql.FieldEQ(FieldStartedAt, v))
}

// FinishedAt applies equality check predicate on the "finished_at" field. It's identical to FinishedAtEQ.
func FinishedAt(v time.Time) predicate.Job {
	return predicate.Job(sql.FieldEQ(FieldFinishedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Job {
	return predicate.Job(sql.FieldEQ(FieldUpdatedAt, v))
}

// JobIDEQ applies the EQ predicate on the "job_id" field.
func JobIDEQ(v string) predicate.Job {
	return predicate.Job(sql.FieldEQ(FieldJobID, v))
}

// JobIDNEQ applies the NEQ predicate on the "job_id" field.
func JobIDNEQ(v string) predicate.Job {
	return predicate.Job(sql.FieldNEQ(FieldJobID, v))
}

// JobIDIn applies the In predicate on the "job_id" field.
func JobIDIn(vs ...string) predicate.Job {
	return predicate.Job(sql.FieldIn(FieldJobID, vs...))
}

// JobIDNotIn applies the NotIn predicate on the "job_id" field.
func JobIDNotIn(vs ...string) predicate.Job {
	return predicate.Job(sql.FieldNotIn(FieldJobID, vs...))
}

// JobIDGT applies the GT predicate on the "job_id" field.
func JobIDGT(v string) predicate.Job {
	return predicate.Job(sql.FieldGT(FieldJobID, v))
}

// JobIDGTE applies the GTE predicate on the "job_id" field.
func JobIDGTE(v string) predicate.Job {
	return predicate.Job(sql.FieldGTE(FieldJobID, v))
}

// JobIDLT applies the LT predicate on the "job_id" field.
func JobIDLT(v string) predicate.Job {
	return predicate.Job(sql.FieldLT(FieldJobID, v))
}

// JobIDLTE applies the LTE predicate on the "job_id" field.
func JobIDLTE(v string) predicate.Job {
	return predicate.Job(sql.FieldLTE(FieldJobID, v))
}

// JobIDContains applies the Contains predicate on the "job_id" field.
func JobIDContains(v string) predicate.Job {
	return predicate.Job(sql.FieldContains(FieldJobID, v))
}

// JobIDHasPrefix applies the HasPrefix predicate on the "job_id" field.
func JobIDHasPrefix(v string) predicate.Job {
	return predicate.Job(sql.FieldHasPrefix(FieldJobID, v))
}

// JobIDHasSuffix applies the HasSuffix predicate on the "job_id" field.
func JobIDHasSuffix(v string) predicate.Job {
	return predicate.Job(sql.FieldHasSuffix(FieldJobID, v))
}

// JobIDEqualFold applies the EqualFold predicate on the "job_id" field.
func JobIDEqualFold(v string) predicate.Job {
	return predicate.Job(sql.FieldEqualFold(FieldJobID, v))
}

// JobIDContainsFold applies the ContainsFold predicate on the "job_id" field.
func JobIDContainsFold(v string) predicate.Job {
	return predicate.Job(sql.FieldContainsFold(FieldJobID, v))
}

// TargetNodeIDEQ applies the EQ predicate on the "target_node_id" field.
func TargetNodeIDEQ(v string) predicate.Job {
	return predicate.Job(sql.FieldEQ(FieldTargetNodeID, v))
}

// TargetNodeIDNEQ applies the NEQ predicate on the "target_node_id" field.
func TargetNodeIDNEQ(v string) predicate.Job {
	return predicate.Job(sql.FieldNEQ(FieldTargetNodeID, v))
}

// TargetNodeIDIn applies the In predicate on the "target_node_id" field.
func TargetNodeIDIn(vs ...string) predicate.Job {
	return predicate.Job(sql.FieldIn(FieldTargetNodeID, vs...))
}

// TargetNodeIDNotIn applies the NotIn predicate on the "target_node_id" field.
func TargetNodeIDNotIn(vs ...string) predicate.Job {
	return predicate.Job(sql.FieldNotIn(FieldTargetNodeID, vs...))
}

// TargetNodeIDGT applies the GT predicate on the "target_node_id" field.
func TargetNodeIDGT(v string) predicate.Job {
	return predicate.Job(sql.FieldGT(FieldTargetNodeID, v))
}

// TargetNodeIDGTE applies the GTE predicate on the "target_node_id" field.
func TargetNodeIDGTE(v string) predicate.Job {
	return predicate.Job(sql.FieldGTE(FieldTargetNodeID, v))
}

// TargetNodeIDLT applies the LT predicate on the "target_node_id" field.
func TargetNodeIDLT(v string) predicate.Job {
	return predicate.Job(sql.FieldLT(FieldTargetNodeID, v))
}

// TargetNodeIDLTE applies the LTE predicate on the "target_node_id" field.
func TargetNodeIDLTE(v string) predicate.Job {
	return predicate.Job(sql.FieldLTE(FieldTargetNodeID, v))
}

// TargetNodeIDContains applies the Contains predicate on the "target_node_id" field.
func TargetNodeIDContains(v string) predicate.Job {
	return predicate.Job(sql.FieldContains(FieldTargetNodeID, v))
}

// TargetNodeIDHasPrefix applies the HasPrefix predicate on the "target_node_id" field.
func TargetNodeIDHasPrefix(v string) predicate.Job {
	return predicate.Job(sql.FieldHasPrefix(FieldTargetNodeID, v))
}

// TargetNodeIDHasSuffix applies the HasSuffix predicate on the "target_node_id" field.
func TargetNodeIDHasSuffix(v string) predicate.Job {
	return predicate.Job(sql.FieldHasSuffix(FieldTargetNodeID, v))
}

// TargetNodeIDEqualFold applies the EqualFold predicate on the "target_node_id" field.
func TargetNodeIDEqualFold(v string) predicate.Job {
	return predicate.Job(sql.FieldEqualFold(FieldTargetNodeID, v))
}

// TargetNodeIDContainsFold applies the ContainsFold predicate on the "target_node_id" field.
func TargetNodeIDContainsFold(v string) predicate.Job {
	return predicate.Job(sql.FieldContainsFold(FieldTargetNodeID, v))
}

// CommandEQ applies the EQ predicate on the "command" field.
func CommandEQ(v string) predicate.Job {
	return predicate.Job(sql.FieldEQ(FieldCommand, v))
}

// CommandNEQ applies the NEQ predicate on the "command" field.
func CommandNEQ(v string) predicate.Job {
	return predicate.Job(sql.FieldNEQ(FieldCommand, v))
}

// CommandIn applies the In predicate on the "command" field.
func CommandIn(vs ...string) predicate.Job {
	return predicate.Job(sql.FieldIn(FieldCommand, vs...))
}

// CommandNotIn applies the NotIn predicate on the "command" field.
func CommandNotIn(vs ...string) predicate.Job {
	return predicate.Job(sql.FieldNotIn(FieldCommand, vs...))
}

// CommandGT applies the GT predicate on the "command" field.
func CommandGT(v string) predicate.Job {
	return predicate.Job(sql.FieldGT(FieldCommand, v))
}

// CommandGTE applies the GTE predicate on the "command" field.
func CommandGTE(v string) predicate.Job {
	return predicate.Job(sql.FieldGTE(FieldCommand, v))
}

// CommandLT applies the LT predicate on the "command" field.
func CommandLT(v string) predicate.Job {
	return predicate.Job(sql.FieldLT(FieldCommand, v))
}

// CommandLTE applies the LTE predicate on the "command" field.
func CommandLTE(v string) predicate.Job {
	return predicate.Job(sql.FieldLTE(FieldCommand, v))
}

// CommandContains applies the Contains predicate on the "command" field.
func CommandContains(v string) predicate.Job {
	return predicate.Job(sql.FieldContains(FieldCommand, v))
}

// CommandHasPrefix applies the HasPrefix predicate on the "command" field.
func CommandHasPrefix(v string) predicate.Job {
	return predicate.Job(sql.FieldHasPrefix(FieldCommand, v))
}

// CommandHasSuffix applies the HasSuffix predicate on the "command" field.
func CommandHasSuffix(v string) predicate.Job {
	return predicate.Job(sql.FieldHasSuffix(FieldCommand, v))
}

// CommandEqualFold applies the EqualFold predicate on the "command" field.
func CommandEqualFold(v string) predicate.Job {
	return predicate.Job(sql.FieldEqualFold(FieldCommand, v))
}

// CommandContainsFold applies the ContainsFold predicate on the "command" field.
func CommandContainsFold(v string) predicate.Job {
	return predicate.Job(sql.FieldContainsFold(FieldCommand, v))
}

// EnvIsNil applies the IsNil predicate on the "env" field.
func EnvIsNil() predicate.Job {
	return predicate.Job(sql.FieldIsNull(FieldEnv))
}

// EnvNotNil applies the NotNil predicate on the "env" field.
func EnvNotNil() predicate.Job {
	return predicate.Job(sql.FieldNotNull(FieldEnv))
}

// TimeoutSecondsEQ applies the EQ predicate on the "timeout_seconds" field.
func TimeoutSecondsEQ(v int32) predicate.Job {
	return predicate.Job(sql.FieldEQ(FieldTimeoutSeconds, v))
}

// TimeoutSecondsNEQ applies the NEQ predicate on the "timeout_seconds" field.
func TimeoutSecondsNEQ(v int32) predicate.Job {
	return predicate.Job(sql.FieldNEQ(FieldTimeoutSeconds, v))
}

// TimeoutSecondsIn applies the In predicate on the "timeout_seconds" field.
func TimeoutSecondsIn(vs ...int32) predicate.Job {
	return predicate.Job(sql.FieldIn(FieldTimeoutSeconds, vs...))
}

// TimeoutSecondsNotIn applies the NotIn predicate on the "timeout_seconds" field.
func TimeoutSecondsNotIn(vs ...int32) predicate.Job {
	return predicate.Job(sql.FieldNotIn(FieldTimeoutSeconds, vs...))
}

// TimeoutSecondsGT applies the GT predicate on the "timeout_seconds" field.
func TimeoutSecondsGT(v int32) predicate.Job {
	return predicate.Job(sql.FieldGT(FieldTimeoutSeconds, v))
}

// TimeoutSecondsGTE applies the GTE predicate on the "timeout_seconds" field.
func TimeoutSecondsGTE(v int32) predicate.Job {
	return predicate.Job(sql.FieldGTE(FieldTimeoutSeconds, v))
}

// TimeoutSecondsLT applies the LT predicate on the "timeout_seconds" field.
func TimeoutSecondsLT(v int32) predicate.Job {
	return predicate.Job(sql.FieldLT(FieldTimeoutSeconds, v))
}

// TimeoutSecondsLTE applies the LTE predicate on the "timeout_seconds" field.
func TimeoutSecondsLTE(v int32) predicate.Job {
	return predicate.Job(sql.FieldLTE(FieldTimeoutSeconds, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v string) predicate.Job {
	return predicate.Job(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v string) predicate.Job {
	return predicate.Job(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...string) predicate.Job {
	return predicate.Job(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...string) predicate.Job {
	return predicate.Job(sql.FieldNotIn(FieldStatus, vs...))
}

// StatusGT applies the GT predicate on the "status" field.
func StatusGT(v string) predicate.Job {
	return predicate.Job(sql.FieldGT(FieldStatus, v))
}

// StatusGTE applies the GTE predicate on the "status" field.
func StatusGTE(v string) predicate.Job {
	return predicate.Job(sql.FieldGTE(FieldStatus, v))
}

// StatusLT applies the LT predicate on the "status" field.
func StatusLT(v string) predicate.Job {
	return predicate.Job(sql.FieldLT(FieldStatus, v))
}

// StatusLTE applies the LTE predicate on the "status" field.
func StatusLTE(v string) predicate.Job {
	return predicate.Job(sql.FieldLTE(FieldStatus, v))
}

// StatusContains applies the Contains predicate on the "status" field.
func StatusContains(v string) predicate.Job {
	return predicate.Job(sql.FieldContains(FieldStatus, v))
}

// StatusHasPrefix applies the HasPrefix predicate on the "status" field.
func StatusHasPrefix(v string) predicate.Job {
	return predicate.Job(sql.FieldHasPrefix(FieldStatus, v))
}

// StatusHasSuffix applies the HasSuffix predicate on the "status" field.
func StatusHasSuffix(v string) predicate.Job {
	return predicate.Job(sql.FieldHasSuffix(FieldStatus, v))
}

// StatusEqualFold applies the EqualFold predicate on the "status" field.
func StatusEqualFold(v string) predicate.Job {
	return predicate.Job(sql.FieldEqualFold(FieldStatus, v))
}

// StatusContainsFold applies the ContainsFold predicate on the "status" field.
func StatusContainsFold(v string) predicate.Job {
	return predicate.Job(sql.FieldContainsFold(FieldStatus, v))
}

// CreatedByNodeEQ applies the EQ predicate on the "created_by_node" field.
func CreatedByNodeEQ(v string) predicate.Job {
	return predicate.Job(sql.FieldEQ(FieldCreatedByNode, v))
}

// CreatedByNodeNEQ applies the NEQ predicate on the "created_by_node" field.
func CreatedByNodeNEQ(v string) predicate.Job {
	return predicate.Job(sql.FieldNEQ(FieldCreatedByNode, v))
}

// CreatedByNodeIn applies the In predicate on the "created_by_node" field.
func CreatedByNodeIn(vs ...string) predicate.Job {
	return predicate.Job(sql.FieldIn(FieldCreatedByNode, vs...))
}

// CreatedByNodeNotIn applies the NotIn predicate on the "created_by_node" field.
func CreatedByNodeNotIn(vs ...string) predicate.Job {
	return predicate.Job(sql.FieldNotIn(FieldCreatedByNode, vs...))
}

// CreatedByNodeGT applies the GT predicate on the "created_by_node" field.
func CreatedByNodeGT(v string) predicate.Job {
	return predicate.Job(sql.FieldGT(FieldCreatedByNode, v))
}

// CreatedByNodeGTE applies the GTE predicate on the "created_by_node" field.
func CreatedByNodeGTE(v string) predicate.Job {
	return predicate.Job(sql.FieldGTE(FieldCreatedByNode, v))
}

// CreatedByNodeLT applies the LT predicate on the "created_by_node" field.
func CreatedByNodeLT(v string) predicate.Job {
	return predicate.Job(sql.FieldLT(FieldCreatedByNode, v))
}

// CreatedByNodeLTE applies the LTE predicate on the "created_by_node" field.
func CreatedByNodeLTE(v string) predicate.Job {
	return predicate.Job(sql.FieldLTE(FieldCreatedByNode, v))
}

// CreatedByNodeContains applies the Contains predicate on the "created_by_node" field.
func CreatedByNodeContains(v string) predicate.Job {
	return predicate.Job(sql.FieldContains(FieldCreatedByNode, v))
}

// CreatedByNodeHasPrefix applies the HasPrefix predicate on the "created_by_node" field.
func CreatedByNodeHasPrefix(v string) predicate.Job {
	return predicate.Job(sql.FieldHasPrefix(FieldCreatedByNode, v))
}

// CreatedByNodeHasSuffix applies the HasSuffix predicate on the "created_by_node" field.
func CreatedByNodeHasSuffix(v string) predicate.Job {
	return predicate.Job(sql.FieldHasSuffix(FieldCreatedByNode, v))
}

// CreatedByNodeEqualFold applies the EqualFold predicate on the "created_by_node" field.
func CreatedByNodeEqualFold(v string) predicate.Job {
	return predicate.Job(sql.FieldEqualFold(FieldCreatedByNode, v))
}

// CreatedByNodeContainsFold applies the ContainsFold predicate on the "created_by_node" field.
func CreatedByNodeContainsFold(v string) predicate.Job {
	return predicate.Job(sql.FieldContainsFold(FieldCreatedByNode, v))
}

// ExitCodeEQ applies the EQ predicate on the "exit_code" field.
func ExitCodeEQ(v int32) predicate.Job {
	return predicate.Job(sql.FieldEQ(FieldExitCode, v))
}

// ExitCodeNEQ applies the NEQ predicate on the "exit_code" field.
func ExitCodeNEQ(v int32) predicate.Job {
	return predicate.Job(sql.FieldNEQ(FieldExitCode, v))
}

// ExitCodeIn applies the In predicate on the "exit_code" field.
func ExitCodeIn(vs ...int32) predicate.Job {
	return predicate.Job(sql.FieldIn(FieldExitCode, vs...))
}

// ExitCodeNotIn applies the NotIn predicate on the "exit_code" field.
func ExitCodeNotIn(vs ...int32) predicate.Job {
	return predicate.Job(sql.FieldNotIn(FieldExitCode, vs...))
}

// ExitCodeGT applies the GT predicate on the "exit_code" field.
func ExitCodeGT(v int32) predicate.Job {
	return predicate.Job(sql.FieldGT(FieldExitCode, v))
}

// ExitCodeGTE applies the GTE predicate on the "exit_code" field.
func ExitCodeGTE(v int32) predicate.Job {
	return predicate.Job(sql.FieldGTE(FieldExitCode, v))
}

// ExitCodeLT applies the LT predicate on the "exit_code" field.
func ExitCodeLT(v int32) predicate.Job {
	return predicate.Job(sql.FieldLT(FieldExitCode, v))
}

// ExitCodeLTE applies the LTE predicate on the "exit_code" field.
func ExitCodeLTE(v int32) predicate.Job {
	return predicate.Job(sql.FieldLTE(FieldExitCode, v))
}

// ExitCodeIsNil applies the IsNil predicate on the "exit_code" field.
func ExitCodeIsNil() predicate.Job {
	return predicate.Job(sql.FieldIsNull(FieldExitCode))
}

// ExitCodeNotNil applies the NotNil predicate on the "exit_code" field.
func ExitCodeNotNil() predicate.Job {
	return predicate.Job(sql.FieldNotNull(FieldExitCode))
}

// StdoutEQ applies the EQ predicate on the "stdout" field.
func StdoutEQ(v string) predicate.Job {
	return predicate.Job(sql.FieldEQ(FieldStdout, v))
}

// StdoutNEQ applies the NEQ predicate on the "stdout" field.
func StdoutNEQ(v string) predicate.Job {
	return predicate.Job(sql.FieldNEQ(FieldStdout, v))
}

// StdoutIn applies the In predicate on the "stdout" field.
func StdoutIn(vs ...string) predicate.Job {
	return predicate.Job(sql.FieldIn(FieldStdout, vs...))
}

// StdoutNotIn applies the NotIn predicate on the "stdout" field.
func StdoutNotIn(vs ...string) predicate.Job {
	return predicate.Job(sql.FieldNotIn(FieldStdout, vs...))
}

// StdoutGT applies the GT predicate on the "stdout" field.
func StdoutGT(v string) predicate.Job {
	return predicate.Job(sql.FieldGT(FieldStdout, v))
}

// StdoutGTE applies the GTE predicate on the "stdout" field.
func StdoutGTE(v string) predicate.Job {
	return predicate.Job(sql.FieldGTE(FieldStdout, v))
}

// StdoutLT applies the LT predicate on the "stdout" field.
func StdoutLT(v string) predicate.Job {
	return predicate.Job(sql.FieldLT(FieldStdout, v))
}

// StdoutLTE applies the LTE predicate on the "stdout" field.
func StdoutLTE(v string) predicate.Job {
	return predicate.Job(sql.FieldLTE(FieldStdout, v))
}

// StdoutContains applies the Contains predicate on the "stdout" field.
func StdoutContains(v string) predicate.Job {
	return predicate.Job(sql.FieldContains(FieldStdout, v))
}

// StdoutHasPrefix applies the HasPrefix predicate on the "stdout" field.
func StdoutHasPrefix(v string) predicate.Job {
	return predicate.Job(sql.FieldHasPrefix(FieldStdout, v))
}

// StdoutHasSuffix applies the HasSuffix predicate on the "stdout" field.
func StdoutHasSuffix(v string) predicate.Job {
	return predicate.Job(sql.FieldHasSuffix(FieldStdout, v))
}

// StdoutIsNil applies the IsNil predicate on the "stdout" field.
func StdoutIsNil() predicate.Job {
	return predicate.Job(sql.FieldIsNull(FieldStdout))
}

// StdoutNotNil applies the NotNil predicate on the "stdout" field.
func StdoutNotNil() predicate.Job {
	return predicate.Job(sql.FieldNotNull(FieldStdout))
}

// StdoutEqualFold applies the EqualFold predicate on the "stdout" field.
func StdoutEqualFold(v string) predicate.Job {
	return predicate.Job(sql.FieldEqualFold(FieldStdout, v))
}

// StdoutContainsFold applies the ContainsFold predicate on the "stdout" field.
func StdoutContainsFold(v string) predicate.Job {
	return predicate.Job(sql.FieldContainsFold(FieldStdout, v))
}

// StderrEQ applies the EQ predicate on the "stderr" field.
func StderrEQ(v string) predicate.Job {
	return predicate.Job(sql.FieldEQ(FieldStderr, v))
}

// StderrNEQ applies the NEQ predicate on the "stderr" field.
func StderrNEQ(v string) predicate.Job {
	return predicate.Job(sql.FieldNEQ(FieldStderr, v))
}

// StderrIn applies the In predicate on the "stderr" field.
func StderrIn(vs ...string) predicate.Job {
	return predicate.Job(sql.FieldIn(FieldStderr, vs...))
}

// StderrNotIn applies the NotIn predicate on the "stderr" field.
func StderrNotIn(vs ...string) predicate.Job {
	return predicate.Job(sql.FieldNotIn(FieldStderr, vs...))
}

// StderrGT applies the GT predicate on the "stderr" field.
func StderrGT(v string) predicate.Job {
	return predicate.Job(sql.FieldGT(FieldStderr, v))
}

// StderrGTE applies the GTE predicate on the "stderr" field.
func StderrGTE(v string) predicate.Job {
	return predicate.Job(sql.FieldGTE(FieldStderr, v))
}

// StderrLT applies the LT predicate on the "stderr" field.
func StderrLT(v string) predicate.Job {
	return predicate.Job(sql.FieldLT(FieldStderr, v))
}

// StderrLTE applies the LTE predicate on the "stderr" field.
func StderrLTE(v string) predicate.Job {
	return predicate.Job(sql.FieldLTE(FieldStderr, v))
}

// StderrContains applies the Contains predicate on the "stderr" field.
func StderrContains(v string) predicate.Job {
	return predicate.Job(sql.FieldContains(FieldStderr, v))
}

// StderrHasPrefix applies the HasPrefix predicate on the "stderr" field.
func StderrHasPrefix(v string) predicate.Job {
	return predicate.Job(sql.FieldHasPrefix(FieldStderr, v))
}

// StderrHasSuffix applies the HasSuffix predicate on the "stderr" field.
func StderrHasSuffix(v string) predicate.Job {
	return predicate.Job(sql.FieldHasSuffix(FieldStderr, v))
}

// StderrIsNil applies the IsNil predicate on the "stderr" field.
func StderrIsNil() predicate.Job {
	return predicate.Job(sql.FieldIsNull(FieldStderr))
}

// StderrNotNil applies the NotNil predicate on the "stderr" field.
func StderrNotNil() predicate.Job {
	return predicate.Job(sql.FieldNotNull(FieldStderr))
}

// StderrEqualFold applies the EqualFold predicate on the "stderr" field.
func StderrEqualFold(v string) predicate.Job {
	return predicate.Job(sql.FieldEqualFold(FieldStderr, v))
}

// StderrContainsFold applies the ContainsFold predicate on the "stderr" field.
func StderrContainsFold(v string) predicate.Job {
	return predicate.Job(sql.FieldContainsFold(FieldStderr, v))
}

// ErrorMessageEQ applies the EQ predicate on the "error_message" field.
func ErrorMessageEQ(v string) predicate.Job {
	return predicate.Job(sql.FieldEQ(FieldErrorMessage, v))
}

// ErrorMessageNEQ applies the NEQ predicate on the "error_message" field.
func ErrorMessageNEQ(v string) predicate.Job {
	return predicate.Job(sql.FieldNEQ(FieldErrorMessage, v))
}

// ErrorMessageIn applies the In predicate on the "error_message" field.
func ErrorMessageIn(vs ...string) predicate.Job {
	return predicate.Job(sql.FieldIn(FieldErrorMessage, vs...))
}

// ErrorMessageNotIn applies the NotIn predicate on the "error_message" field.
func ErrorMessageNotIn(vs ...string) predicate.Job {
	return predicate.Job(sql.FieldNotIn(FieldErrorMessage, vs...))
}

// ErrorMessageGT applies the GT predicate on the "error_message" field.
func ErrorMessageGT(v string) predicate.Job {
	return predicate.Job(sql.FieldGT(FieldErrorMessage, v))
}

// ErrorMessageGTE applies the GTE predicate on the "error_message" field.
func ErrorMessageGTE(v string) predicate.Job {
	return predicate.Job(sql.FieldGTE(FieldErrorMessage, v))
}

// ErrorMessageLT applies the LT predicate on the "error_message" field.
func ErrorMessageLT(v string) predicate.Job {
	return predicate.Job(sql.FieldLT(FieldErrorMessage, v))
}

// ErrorMessageLTE applies the LTE predicate on the "error_message" field.
func ErrorMessageLTE(v string) predicate.Job {
	return predicate.Job(sql.FieldLTE(FieldErrorMessage, v))
}

// ErrorMessageContains applies the Contains predicate on the "error_message" field.
func ErrorMessageContains(v string) predicate.Job {
	return predicate.Job(sql.FieldContains(FieldErrorMessage, v))
}

// ErrorMessageHasPrefix applies the HasPrefix predicate on the "error_message" field.
func ErrorMessageHasPrefix(v string) predicate.Job {
	return predicate.Job(sql.FieldHasPrefix(FieldErrorMessage, v))
}

// ErrorMessageHasSuffix applies the HasSuffix predicate on the "error_message" field.
func ErrorMessageHasSuffix(v string) predicate.Job {
	return predicate.Job(sql.FieldHasSuffix(FieldErrorMessage, v))
}

// ErrorMessageIsNil applies the IsNil predicate on the "error_message" field.
func ErrorMessageIsNil() predicate.Job {
	return predicate.Job(sql.FieldIsNull(FieldErrorMessage))
}

// ErrorMessageNotNil applies the NotNil predicate on the "error_message" field.
func ErrorMessageNotNil() predicate.Job {
	return predicate.Job(sql.FieldNotNull(FieldErrorMessage))
}

// ErrorMessageEqualFold applies the EqualFold predicate on the "error_message" field.
func ErrorMessageEqualFold(v string) predicate.Job {
	return predicate.Job(sql.FieldEqualFold(FieldErrorMessage, v))
}

// ErrorMessageContainsFold applies the ContainsFold predicate on the "error_message" field.
func ErrorMessageContainsFold(v string) predicate.Job {
	return predicate.Job(sql.FieldContainsFold(FieldErrorMessage, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Job {
	return predicate.Job(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Job {
	return predicate.Job(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Job {
	return predicate.Job(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Job {
	return predicate.Job(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Job {
	return predicate.Job(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Job {
	return predicate.Job(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Job {
	return predicate.Job(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Job {
	return predicate.Job(sql.FieldLTE(FieldCreatedAt, v))
}

// StartedAtEQ applies the EQ predicate on the "started_at" field.
func StartedAtEQ(v time.Time) predicate.Job {
	return predicate.Job(sql.FieldEQ(FieldStartedAt, v))
}

// StartedAtNEQ applies the NEQ predicate on the "started_at" field.
func StartedAtNEQ(v time.Time) predicate.Job {
	return predicate.Job(sql.FieldNEQ(FieldStartedAt, v))
}

// StartedAtIn applies the In predicate on the "started_at" field.
func StartedAtIn(vs ...time.Time) predicate.Job {
	return predicate.Job(sql.FieldIn(FieldStartedAt, vs...))
}

// StartedAtNotIn applies the NotIn predicate on the "started_at" field.
func StartedAtNotIn(vs ...time.Time) predicate.Job {
	return predicate.Job(sql.FieldNotIn(FieldStartedAt, vs...))
}

// StartedAtGT applies the GT predicate on the "started_at" field.
func StartedAtGT(v time.Time) predicate.Job {
	return predicate.Job(sql.FieldGT(FieldStartedAt, v))
}

// StartedAtGTE applies the GTE predicate on the "started_at" field.
func StartedAtGTE(v time.Time) predicate.Job {
	return predicate.Job(sql.FieldGTE(FieldStartedAt, v))
}

// StartedAtLT applies the LT predicate on the "started_at" field.
func StartedAtLT(v time.Time) predicate.Job {
	return predicate.Job(sql.FieldLT(FieldStartedAt, v))
}

// StartedAtLTE applies the LTE predicate on the "started_at" field.
func StartedAtLTE(v time.Time) predicate.Job {
	return predicate.Job(sql.FieldLTE(FieldStartedAt, v))
}

// StartedAtIsNil applies the IsNil predicate on the "started_at" field.
func StartedAtIsNil() predicate.Job {
	return predicate.Job(sql.FieldIsNull(FieldStartedAt))
}

// StartedAtNotNil applies the NotNil predicate on the "started_at" field.
func StartedAtNotNil() predicate.Job {
	return predicate.Job(sql.FieldNotNull(FieldStartedAt))
}

// FinishedAtEQ applies the EQ predicate on the "finished_at" field.
func FinishedAtEQ(v time.Time) predicate.Job {
	return predicate.Job(sql.FieldEQ(FieldFinishedAt, v))
}

// FinishedAtNEQ applies the NEQ predicate on the "finished_at" field.
func FinishedAtNEQ(v time.Time) predicate.Job {
	return predicate.Job(sql.FieldNEQ(FieldFinishedAt, v))
}

// FinishedAtIn applies the In predicate on the "finished_at" field.
func FinishedAtIn(vs ...time.Time) predicate.Job {
	return predicate.Job(sql.FieldIn(FieldFinishedAt, vs...))
}

// FinishedAtNotIn applies the NotIn predicate on the "finished_at" field.
func FinishedAtNotIn(vs ...time.Time) predicate.Job {
	return predicate.Job(sql.FieldNotIn(FieldFinishedAt, vs...))
}

// FinishedAtGT applies the GT predicate on the "finished_at" field.
func FinishedAtGT(v time.Time) predicate.Job {
	return predicate.Job(sql.FieldGT(FieldFinishedAt, v))
}

// FinishedAtGTE applies the GTE predicate on the "finished_at" field.
func FinishedAtGTE(v time.Time) predicate.Job {
	return predicate.Job(sql.FieldGTE(FieldFinishedAt, v))
}

// FinishedAtLT applies the LT predicate on the "finished_at" field.
func FinishedAtLT(v time.Time) predicate.Job {
	return predicate.Job(sql.FieldLT(FieldFinishedAt, v))
}

// FinishedAtLTE applies the LTE predicate on the "finished_at" field.
func FinishedAtLTE(v time.Time) predicate.Job {
	return predicate.Job(sql.FieldLTE(FieldFinishedAt, v))
}

// FinishedAtIsNil applies the IsNil predicate on the "finished_at" field.
func FinishedAtIsNil() predicate.Job {
	return predicate.Job(sql.FieldIsNull(FieldFinishedAt))
}

// FinishedAtNotNil applies the NotNil predicate on the "finished_at" field.
func FinishedAtNotNil() predicate.Job {
	return predicate.Job(sql.FieldNotNull(FieldFinishedAt))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Job {
	return predicate.Job(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Job {
	return predicate.Job(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Job {
	return predicate.Job(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Job {
	return predicate.Job(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Job {
	return predicate.Job(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Job {
	return predicate.Job(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Job {
	return predicate.Job(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Job {
	return predicate.Job(sql.FieldLTE(FieldUpdatedAt, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Job) predicate.Job {
	return predicate.Job(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Job) predicate.Job {
	return predicate.Job(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Job) predicate.Job {
	return predicate.Job(sql.NotPredicates(p))
}
