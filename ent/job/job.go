// Code generated by ent, DO NOT EDIT.

package job

import (
	"time"

	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the job type in the database.
	Label = "job"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldJobID holds the string denoting the job_id field in the database.
	FieldJobID = "job_id"
	// FieldTargetNodeID holds the string denoting the target_node_id field in the database.
	FieldTargetNodeID = "target_node_id"
	// FieldCommand holds the string denoting the command field in the database.
	FieldCommand = "command"
	// FieldEnv holds the string denoting the env field in the database.
	FieldEnv = "env"
	// FieldTimeoutSeconds holds the string denoting the timeout_seconds field in the database.
	FieldTimeoutSeconds = "timeout_seconds"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldCreatedByNode holds the string denoting the created_by_node field in the database.
	FieldCreatedByNode = "created_by_node"
	// FieldExitCode holds the string denoting the exit_code field in the database.
	FieldExitCode = "exit_code"
	// FieldStdout holds the string denoting the stdout field in the database.
	FieldStdout = "stdout"
	// FieldStderr holds the string denoting the stderr field in the database.
	FieldStderr = "stderr"
	// FieldErrorMessage holds the string denoting the error_message field in the database.
	FieldErrorMessage = "error_message"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldStartedAt holds the string denoting the started_at field in the database.
	FieldStartedAt = "started_at"
	// FieldFinishedAt holds the string denoting the finished_at field in the database.
	FieldFinishedAt = "finished_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// Table holds the table name of the job in the database.
	Table = "jobs"
)

// Columns holds all SQL columns for job fields.
var Columns = []string{
	FieldID,
	FieldJobID,
	FieldTargetNodeID,
	FieldCommand,
	FieldEnv,
	FieldTimeoutSeconds,
	FieldStatus,
	FieldCreatedByNode,
	FieldExitCode,
	FieldStdout,
	FieldStderr,
	FieldErrorMessage,
	FieldCreatedAt,
	FieldStartedAt,
	FieldFinishedAt,
	FieldUpdatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultTimeoutSeconds holds the default value on creation for the "timeout_seconds" field.
	DefaultTimeoutSeconds int32
	// DefaultStatus holds the default value on creation for the "status" field.
	DefaultStatus string
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
)

// OrderOption defines the ordering options for the Job queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByJobID orders the results by the job_id field.
func ByJobID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldJobID, opts...).ToFunc()
}

// ByTargetNodeID orders the results by the target_node_id field.
func ByTargetNodeID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTargetNodeID, opts...).ToFunc()
}

// ByCommand orders the results by the command field.
func ByCommand(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCommand, opts...).ToFunc()
}

// ByTimeoutSeconds orders the results by the timeout_seconds field.
func ByTimeoutSeconds(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTimeoutSeconds, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByCreatedByNode orders the results by the created_by_node field.
func ByCreatedByNode(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedByNode, opts...).ToFunc()
}

// ByExitCode orders the results by the exit_code field.
func ByExitCode(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldExitCode, opts...).ToFunc()
}

// ByStdout orders the results by the stdout field.
func ByStdout(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStdout, opts...).ToFunc()
}

// ByStderr orders the results by the stderr field.
func ByStderr(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStderr, opts...).ToFunc()
}

// ByErrorMessage orders the results by the error_message field.
func ByErrorMessage(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldErrorMessage, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByStartedAt orders the results by the started_at field.
func ByStartedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStartedAt, opts...).ToFunc()
}

// ByFinishedAt orders the results by the finished_at field.
func ByFinishedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFinishedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}
