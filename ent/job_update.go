// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/retr0-kernel/worker-mesh/ent/job"
	"github.com/retr0-kernel/worker-mesh/ent/predicate"
)

// JobUpdate is the builder for updating Job entities.
type JobUpdate struct {
	config
	hooks    []Hook
	mutation *JobMutation
}

// Where appends a list predicates to the JobUpdate builder.
func (ju *JobUpdate) Where(ps ...predicate.Job) *JobUpdate {
	ju.mutation.Where(ps...)
	return ju
}

// SetJobID sets the "job_id" field.
func (ju *JobUpdate) SetJobID(s string) *JobUpdate {
	ju.mutation.SetJobID(s)
	return ju
}

// SetNillableJobID sets the "job_id" field if the given value is not nil.
func (ju *JobUpdate) SetNillableJobID(s *string) *JobUpdate {
	if s != nil {
		ju.SetJobID(*s)
	}
	return ju
}

// SetTargetNodeID sets the "target_node_id" field.
func (ju *JobUpdate) SetTargetNodeID(s string) *JobUpdate {
	ju.mutation.SetTargetNodeID(s)
	return ju
}

// SetNillableTargetNodeID sets the "target_node_id" field if the given value is not nil.
func (ju *JobUpdate) SetNillableTargetNodeID(s *string) *JobUpdate {
	if s != nil {
		ju.SetTargetNodeID(*s)
	}
	return ju
}

// SetCommand sets the "command" field.
func (ju *JobUpdate) SetCommand(s string) *JobUpdate {
	ju.mutation.SetCommand(s)
	return ju
}

// SetNillableCommand sets the "command" field if the given value is not nil.
func (ju *JobUpdate) SetNillableCommand(s *string) *JobUpdate {
	if s != nil {
		ju.SetCommand(*s)
	}
	return ju
}

// SetEnv sets the "env" field.
func (ju *JobUpdate) SetEnv(m map[string]string) *JobUpdate {
	ju.mutation.SetEnv(m)
	return ju
}

// ClearEnv clears the value of the "env" field.
func (ju *JobUpdate) ClearEnv() *JobUpdate {
	ju.mutation.ClearEnv()
	return ju
}

// SetTimeoutSeconds sets the "timeout_seconds" field.
func (ju *JobUpdate) SetTimeoutSeconds(i int32) *JobUpdate {
	ju.mutation.ResetTimeoutSeconds()
	ju.mutation.SetTimeoutSeconds(i)
	return ju
}

// SetNillableTimeoutSeconds sets the "timeout_seconds" field if the given value is not nil.
func (ju *JobUpdate) SetNillableTimeoutSeconds(i *int32) *JobUpdate {
	if i != nil {
		ju.SetTimeoutSeconds(*i)
	}
	return ju
}

// AddTimeoutSeconds adds i to the "timeout_seconds" field.
func (ju *JobUpdate) AddTimeoutSeconds(i int32) *JobUpdate {
	ju.mutation.AddTimeoutSeconds(i)
	return ju
}

// SetStatus sets the "status" field.
func (ju *JobUpdate) SetStatus(s string) *JobUpdate {
	ju.mutation.SetStatus(s)
	return ju
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (ju *JobUpdate) SetNillableStatus(s *string) *JobUpdate {
	if s != nil {
		ju.SetStatus(*s)
	}
	return ju
}

// SetCreatedByNode sets the "created_by_node" field.
func (ju *JobUpdate) SetCreatedByNode(s string) *JobUpdate {
	ju.mutation.SetCreatedByNode(s)
	return ju
}

// SetNillableCreatedByNode sets the "created_by_node" field if the given value is not nil.
func (ju *JobUpdate) SetNillableCreatedByNode(s *string) *JobUpdate {
	if s != nil {
		ju.SetCreatedByNode(*s)
	}
	return ju
}

// SetExitCode sets the "exit_code" field.
func (ju *JobUpdate) SetExitCode(i int32) *JobUpdate {
	ju.mutation.ResetExitCode()
	ju.mutation.SetExitCode(i)
	return ju
}

// SetNillableExitCode sets the "exit_code" field if the given value is not nil.
func (ju *JobUpdate) SetNillableExitCode(i *int32) *JobUpdate {
	if i != nil {
		ju.SetExitCode(*i)
	}
	return ju
}

// AddExitCode adds i to the "exit_code" field.
func (ju *JobUpdate) AddExitCode(i int32) *JobUpdate {
	ju.mutation.AddExitCode(i)
	return ju
}

// ClearExitCode clears the value of the "exit_code" field.
func (ju *JobUpdate) ClearExitCode() *JobUpdate {
	ju.mutation.ClearExitCode()
	return ju
}

// SetStdout sets the "stdout" field.
func (ju *JobUpdate) SetStdout(s string) *JobUpdate {
	ju.mutation.SetStdout(s)
	return ju
}

// SetNillableStdout sets the "stdout" field if the given value is not nil.
func (ju *JobUpdate) SetNillableStdout(s *string) *JobUpdate {
	if s != nil {
		ju.SetStdout(*s)
	}
	return ju
}

// ClearStdout clears the value of the "stdout" field.
func (ju *JobUpdate) ClearStdout() *JobUpdate {
	ju.mutation.ClearStdout()
	return ju
}

// SetStderr sets the "stderr" field.
func (ju *JobUpdate) SetStderr(s string) *JobUpdate {
	ju.mutation.SetStderr(s)
	return ju
}

// SetNillableStderr sets the "stderr" field if the given value is not nil.
func (ju *JobUpdate) SetNillableStderr(s *string) *JobUpdate {
	if s != nil {
		ju.SetStderr(*s)
	}
	return ju
}

// ClearStderr clears the value of the "stderr" field.
func (ju *JobUpdate) ClearStderr() *JobUpdate {
	ju.mutation.ClearStderr()
	return ju
}

// SetErrorMessage sets the "error_message" field.
func (ju *JobUpdate) SetErrorMessage(s string) *JobUpdate {
	ju.mutation.SetErrorMessage(s)
	return ju
}

// SetNillableErrorMessage sets the "error_message" field if the given value is not nil.
func (ju *JobUpdate) SetNillableErrorMessage(s *string) *JobUpdate {
	if s != nil {
		ju.SetErrorMessage(*s)
	}
	return ju
}

// ClearErrorMessage clears the value of the "error_message" field.
func (ju *JobUpdate) ClearErrorMessage() *JobUpdate {
	ju.mutation.ClearErrorMessage()
	return ju
}

// SetStartedAt sets the "started_at" field.
func (ju *JobUpdate) SetStartedAt(t time.Time) *JobUpdate {
	ju.mutation.SetStartedAt(t)
	return ju
}

// SetNillableStartedAt sets the "started_at" field if the given value is not nil.
func (ju *JobUpdate) SetNillableStartedAt(t *time.Time) *JobUpdate {
	if t != nil {
		ju.SetStartedAt(*t)
	}
	return ju
}

// ClearStartedAt clears the value of the "started_at" field.
func (ju *JobUpdate) ClearStartedAt() *JobUpdate {
	ju.mutation.ClearStartedAt()
	return ju
}

// SetFinishedAt sets the "finished_at" field.
func (ju *JobUpdate) SetFinishedAt(t time.Time) *JobUpdate {
	ju.mutation.SetFinishedAt(t)
	return ju
}

// SetNillableFinishedAt sets the "finished_at" field if the given value is not nil.
func (ju *JobUpdate) SetNillableFinishedAt(t *time.Time) *JobUpdate {
	if t != nil {
		ju.SetFinishedAt(*t)
	}
	return ju
}

// ClearFinishedAt clears the value of the "finished_at" field.
func (ju *JobUpdate) ClearFinishedAt() *JobUpdate {
	ju.mutation.ClearFinishedAt()
	return ju
}

// SetUpdatedAt sets the "updated_at" field.
func (ju *JobUpdate) SetUpdatedAt(t time.Time) *JobUpdate {
	ju.mutation.SetUpdatedAt(t)
	return ju
}

// Mutation returns the JobMutation object of the builder.
func (ju *JobUpdate) Mutation() *JobMutation {
	return ju.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ju *JobUpdate) Save(ctx context.Context) (int, error) {
	ju.defaults()
	return withHooks(ctx, ju.sqlSave, ju.mutation, ju.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ju *JobUpdate) SaveX(ctx context.Context) int {
	affected, err := ju.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ju *JobUpdate) Exec(ctx context.Context) error {
	_, err := ju.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ju *JobUpdate) ExecX(ctx context.Context) {
	if err := ju.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ju *JobUpdate) defaults() {
	if _, ok := ju.mutation.UpdatedAt(); !ok {
		v := job.UpdateDefaultUpdatedAt()
		ju.mutation.SetUpdatedAt(v)
	}
}

func (ju *JobUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(job.Table, job.Columns, sqlgraph.NewFieldSpec(job.FieldID, field.TypeInt))
	if ps := ju.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ju.mutation.JobID(); ok {
		_spec.SetField(job.FieldJobID, field.TypeString, value)
	}
	if value, ok := ju.mutation.TargetNodeID(); ok {
		_spec.SetField(job.FieldTargetNodeID, field.TypeString, value)
	}
	if value, ok := ju.mutation.Command(); ok {
		_spec.SetField(job.FieldCommand, field.TypeString, value)
	}
	if value, ok := ju.mutation.Env(); ok {
		_spec.SetField(job.FieldEnv, field.TypeJSON, value)
	}
	if ju.mutation.EnvCleared() {
		_spec.ClearField(job.FieldEnv, field.TypeJSON)
	}
	if value, ok := ju.mutation.TimeoutSeconds(); ok {
		_spec.SetField(job.FieldTimeoutSeconds, field.TypeInt32, value)
	}
	if value, ok := ju.mutation.AddedTimeoutSeconds(); ok {
		_spec.AddField(job.FieldTimeoutSeconds, field.TypeInt32, value)
	}
	if value, ok := ju.mutation.Status(); ok {
		_spec.SetField(job.FieldStatus, field.TypeString, value)
	}
	if value, ok := ju.mutation.CreatedByNode(); ok {
		_spec.SetField(job.FieldCreatedByNode, field.TypeString, value)
	}
	if value, ok := ju.mutation.ExitCode(); ok {
		_spec.SetField(job.FieldExitCode, field.TypeInt32, value)
	}
	if value, ok := ju.mutation.AddedExitCode(); ok {
		_spec.AddField(job.FieldExitCode, field.TypeInt32, value)
	}
	if ju.mutation.ExitCodeCleared() {
		_spec.ClearField(job.FieldExitCode, field.TypeInt32)
	}
	if value, ok := ju.mutation.Stdout(); ok {
		_spec.SetField(job.FieldStdout, field.TypeString, value)
	}
	if ju.mutation.StdoutCleared() {
		_spec.ClearField(job.FieldStdout, field.TypeString)
	}
	if value, ok := ju.mutation.Stderr(); ok {
		_spec.SetField(job.FieldStderr, field.TypeString, value)
	}
	if ju.mutation.StderrCleared() {
		_spec.ClearField(job.FieldStderr, field.TypeString)
	}
	if value, ok := ju.mutation.ErrorMessage(); ok {
		_spec.SetField(job.FieldErrorMessage, field.TypeString, value)
	}
	if ju.mutation.ErrorMessageCleared() {
		_spec.ClearField(job.FieldErrorMessage, field.TypeString)
	}
	if value, ok := ju.mutation.StartedAt(); ok {
		_spec.SetField(job.FieldStartedAt, field.TypeTime, value)
	}
	if ju.mutation.StartedAtCleared() {
		_spec.ClearField(job.FieldStartedAt, field.TypeTime)
	}
	if value, ok := ju.mutation.FinishedAt(); ok {
		_spec.SetField(job.FieldFinishedAt, field.TypeTime, value)
	}
	if ju.mutation.FinishedAtCleared() {
		_spec.ClearField(job.FieldFinishedAt, field.TypeTime)
	}
	if value, ok := ju.mutation.UpdatedAt(); ok {
		_spec.SetField(job.FieldUpdatedAt, field.TypeTime, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ju.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{job.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ju.mutation.done = true
	return n, nil
}

// JobUpdateOne is the builder for updating a single Job entity.
type JobUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *JobMutation
}

// SetJobID sets the "job_id" field.
func (juo *JobUpdateOne) SetJobID(s string) *JobUpdateOne {
	juo.mutation.SetJobID(s)
	return juo
}

// SetNillableJobID sets the "job_id" field if the given value is not nil.
func (juo *JobUpdateOne) SetNillableJobID(s *string) *JobUpdateOne {
	if s != nil {
		juo.SetJobID(*s)
	}
	return juo
}

// SetTargetNodeID sets the "target_node_id" field.
func (juo *JobUpdateOne) SetTargetNodeID(s string) *JobUpdateOne {
	juo.mutation.SetTargetNodeID(s)
	return juo
}

// SetNillableTargetNodeID sets the "target_node_id" field if the given value is not nil.
func (juo *JobUpdateOne) SetNillableTargetNodeID(s *string) *JobUpdateOne {
	if s != nil {
		juo.SetTargetNodeID(*s)
	}
	return juo
}

// SetCommand sets the "command" field.
func (juo *JobUpdateOne) SetCommand(s string) *JobUpdateOne {
	juo.mutation.SetCommand(s)
	return juo
}

// SetNillableCommand sets the "command" field if the given value is not nil.
func (juo *JobUpdateOne) SetNillableCommand(s *string) *JobUpdateOne {
	if s != nil {
		juo.SetCommand(*s)
	}
	return juo
}

// SetEnv sets the "env" field.
func (juo *JobUpdateOne) SetEnv(m map[string]string) *JobUpdateOne {
	juo.mutation.SetEnv(m)
	return juo
}

// ClearEnv clears the value of the "env" field.
func (juo *JobUpdateOne) ClearEnv() *JobUpdateOne {
	juo.mutation.ClearEnv()
	return juo
}

// SetTimeoutSeconds sets the "timeout_seconds" field.
func (juo *JobUpdateOne) SetTimeoutSeconds(i int32) *JobUpdateOne {
	juo.mutation.ResetTimeoutSeconds()
	juo.mutation.SetTimeoutSeconds(i)
	return juo
}

// SetNillableTimeoutSeconds sets the "timeout_seconds" field if the given value is not nil.
func (juo *JobUpdateOne) SetNillableTimeoutSeconds(i *int32) *JobUpdateOne {
	if i != nil {
		juo.SetTimeoutSeconds(*i)
	}
	return juo
}

// AddTimeoutSeconds adds i to the "timeout_seconds" field.
func (juo *JobUpdateOne) AddTimeoutSeconds(i int32) *JobUpdateOne {
	juo.mutation.AddTimeoutSeconds(i)
	return juo
}

// SetStatus sets the "status" field.
func (juo *JobUpdateOne) SetStatus(s string) *JobUpdateOne {
	juo.mutation.SetStatus(s)
	return juo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (juo *JobUpdateOne) SetNillableStatus(s *string) *JobUpdateOne {
	if s != nil {
		juo.SetStatus(*s)
	}
	return juo
}

// SetCreatedByNode sets the "created_by_node" field.
func (juo *JobUpdateOne) SetCreatedByNode(s string) *JobUpdateOne {
	juo.mutation.SetCreatedByNode(s)
	return juo
}

// SetNillableCreatedByNode sets the "created_by_node" field if the given value is not nil.
func (juo *JobUpdateOne) SetNillableCreatedByNode(s *string) *JobUpdateOne {
	if s != nil {
		juo.SetCreatedByNode(*s)
	}
	return juo
}

// SetExitCode sets the "exit_code" field.
func (juo *JobUpdateOne) SetExitCode(i int32) *JobUpdateOne {
	juo.mutation.ResetExitCode()
	juo.mutation.SetExitCode(i)
	return juo
}

// SetNillableExitCode sets the "exit_code" field if the given value is not nil.
func (juo *JobUpdateOne) SetNillableExitCode(i *int32) *JobUpdateOne {
	if i != nil {
		juo.SetExitCode(*i)
	}
	return juo
}

// AddExitCode adds i to the "exit_code" field.
func (juo *JobUpdateOne) AddExitCode(i int32) *JobUpdateOne {
	juo.mutation.AddExitCode(i)
	return juo
}

// ClearExitCode clears the value of the "exit_code" field.
func (juo *JobUpdateOne) ClearExitCode() *JobUpdateOne {
	juo.mutation.ClearExitCode()
	return juo
}

// SetStdout sets the "stdout" field.
func (juo *JobUpdateOne) SetStdout(s string) *JobUpdateOne {
	juo.mutation.SetStdout(s)
	return juo
}

// SetNillableStdout sets the "stdout" field if the given value is not nil.
func (juo *JobUpdateOne) SetNillableStdout(s *string) *JobUpdateOne {
	if s != nil {
		juo.SetStdout(*s)
	}
	return juo
}

// ClearStdout clears the value of the "stdout" field.
func (juo *JobUpdateOne) ClearStdout() *JobUpdateOne {
	juo.mutation.ClearStdout()
	return juo
}

// SetStderr sets the "stderr" field.
func (juo *JobUpdateOne) SetStderr(s string) *JobUpdateOne {
	juo.mutation.SetStderr(s)
	return juo
}

// SetNillableStderr sets the "stderr" field if the given value is not nil.
func (juo *JobUpdateOne) SetNillableStderr(s *string) *JobUpdateOne {
	if s != nil {
		juo.SetStderr(*s)
	}
	return juo
}

// ClearStderr clears the value of the "stderr" field.
func (juo *JobUpdateOne) ClearStderr() *JobUpdateOne {
	juo.mutation.ClearStderr()
	return juo
}

// SetErrorMessage sets the "error_message" field.
func (juo *JobUpdateOne) SetErrorMessage(s string) *JobUpdateOne {
	juo.mutation.SetErrorMessage(s)
	return juo
}

// SetNillableErrorMessage sets the "error_message" field if the given value is not nil.
func (juo *JobUpdateOne) SetNillableErrorMessage(s *string) *JobUpdateOne {
	if s != nil {
		juo.SetErrorMessage(*s)
	}
	return juo
}

// ClearErrorMessage clears the value of the "error_message" field.
func (juo *JobUpdateOne) ClearErrorMessage() *JobUpdateOne {
	juo.mutation.ClearErrorMessage()
	return juo
}

// SetStartedAt sets the "started_at" field.
func (juo *JobUpdateOne) SetStartedAt(t time.Time) *JobUpdateOne {
	juo.mutation.SetStartedAt(t)
	return juo
}

// SetNillableStartedAt sets the "started_at" field if the given value is not nil.
func (juo *JobUpdateOne) SetNillableStartedAt(t *time.Time) *JobUpdateOne {
	if t != nil {
		juo.SetStartedAt(*t)
	}
	return juo
}

// ClearStartedAt clears the value of the "started_at" field.
func (juo *JobUpdateOne) ClearStartedAt() *JobUpdateOne {
	juo.mutation.ClearStartedAt()
	return juo
}

// SetFinishedAt sets the "finished_at" field.
func (juo *JobUpdateOne) SetFinishedAt(t time.Time) *JobUpdateOne {
	juo.mutation.SetFinishedAt(t)
	return juo
}

// SetNillableFinishedAt sets the "finished_at" field if the given value is not nil.
func (juo *JobUpdateOne) SetNillableFinishedAt(t *time.Time) *JobUpdateOne {
	if t != nil {
		juo.SetFinishedAt(*t)
	}
	return juo
}

// ClearFinishedAt clears the value of the "finished_at" field.
func (juo *JobUpdateOne) ClearFinishedAt() *JobUpdateOne {
	juo.mutation.ClearFinishedAt()
	return juo
}

// SetUpdatedAt sets the "updated_at" field.
func (juo *JobUpdateOne) SetUpdatedAt(t time.Time) *JobUpdateOne {
	juo.mutation.SetUpdatedAt(t)
	return juo
}

// Mutation returns the JobMutation object of the builder.
func (juo *JobUpdateOne) Mutation() *JobMutation {
	return juo.mutation
}

// Where appends a list predicates to the JobUpdate builder.
func (juo *JobUpdateOne) Where(ps ...predicate.Job) *JobUpdateOne {
	juo.mutation.Where(ps...)
	return juo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (juo *JobUpdateOne) Select(field string, fields ...string) *JobUpdateOne {
	juo.fields = append([]string{field}, fields...)
	return juo
}

// Save executes the query and returns the updated Job entity.
func (juo *JobUpdateOne) Save(ctx context.Context) (*Job, error) {
	juo.defaults()
	return withHooks(ctx, juo.sqlSave, juo.mutation, juo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (juo *JobUpdateOne) SaveX(ctx context.Context) *Job {
	node, err := juo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (juo *JobUpdateOne) Exec(ctx context.Context) error {
	_, err := juo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (juo *JobUpdateOne) ExecX(ctx context.Context) {
	if err := juo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (juo *JobUpdateOne) defaults() {
	if _, ok := juo.mutation.UpdatedAt(); !ok {
		v := job.UpdateDefaultUpdatedAt()
		juo.mutation.SetUpdatedAt(v)
	}
}

func (juo *JobUpdateOne) sqlSave(ctx context.Context) (_node *Job, err error) {
	_spec := sqlgraph.NewUpdateSpec(job.Table, job.Columns, sqlgraph.NewFieldSpec(job.FieldID, field.TypeInt))
	id, ok := juo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Job.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := juo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, job.FieldID)
		for _, f := range fields {
			if !job.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != job.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := juo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := juo.mutation.JobID(); ok {
		_spec.SetField(job.FieldJobID, field.TypeString, value)
	}
	if value, ok := juo.mutation.TargetNodeID(); ok {
		_spec.SetField(job.FieldTargetNodeID, field.TypeString, value)
	}
	if value, ok := juo.mutation.Command(); ok {
		_spec.SetField(job.FieldCommand, field.TypeString, value)
	}
	if value, ok := juo.mutation.Env(); ok {
		_spec.SetField(job.FieldEnv, field.TypeJSON, value)
	}
	if juo.mutation.EnvCleared() {
		_spec.ClearField(job.FieldEnv, field.TypeJSON)
	}
	if value, ok := juo.mutation.TimeoutSeconds(); ok {
		_spec.SetField(job.FieldTimeoutSeconds, field.TypeInt32, value)
	}
	if value, ok := juo.mutation.AddedTimeoutSeconds(); ok {
		_spec.AddField(job.FieldTimeoutSeconds, field.TypeInt32, value)
	}
	if value, ok := juo.mutation.Status(); ok {
		_spec.SetField(job.FieldStatus, field.TypeString, value)
	}
	if value, ok := juo.mutation.CreatedByNode(); ok {
		_spec.SetField(job.FieldCreatedByNode, field.TypeString, value)
	}
	if value, ok := juo.mutation.ExitCode(); ok {
		_spec.SetField(job.FieldExitCode, field.TypeInt32, value)
	}
	if value, ok := juo.mutation.AddedExitCode(); ok {
		_spec.AddField(job.FieldExitCode, field.TypeInt32, value)
	}
	if juo.mutation.ExitCodeCleared() {
		_spec.ClearField(job.FieldExitCode, field.TypeInt32)
	}
	if value, ok := juo.mutation.Stdout(); ok {
		_spec.SetField(job.FieldStdout, field.TypeString, value)
	}
	if juo.mutation.StdoutCleared() {
		_spec.ClearField(job.FieldStdout, field.TypeString)
	}
	if value, ok := juo.mutation.Stderr(); ok {
		_spec.SetField(job.FieldStderr, field.TypeString, value)
	}
	if juo.mutation.StderrCleared() {
		_spec.ClearField(job.FieldStderr, field.TypeString)
	}
	if value, ok := juo.mutation.ErrorMessage(); ok {
		_spec.SetField(job.FieldErrorMessage, field.TypeString, value)
	}
	if juo.mutation.ErrorMessageCleared() {
		_spec.ClearField(job.FieldErrorMessage, field.TypeString)
	}
	if value, ok := juo.mutation.StartedAt(); ok {
		_spec.SetField(job.FieldStartedAt, field.TypeTime, value)
	}
	if juo.mutation.StartedAtCleared() {
		_spec.ClearField(job.FieldStartedAt, field.TypeTime)
	}
	if value, ok := juo.mutation.FinishedAt(); ok {
		_spec.SetField(job.FieldFinishedAt, field.TypeTime, value)
	}
	if juo.mutation.FinishedAtCleared() {
		_spec.ClearField(job.FieldFinishedAt, field.TypeTime)
	}
	if value, ok := juo.mutation.UpdatedAt(); ok {
		_spec.SetField(job.FieldUpdatedAt, field.TypeTime, value)
	}
	_node = &Job{config: juo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, juo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{job.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	juo.mutation.done = true
	return _node, nil
}
