// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/retr0-kernel/worker-mesh/ent/predicate"
	"github.com/retr0-kernel/worker-mesh/ent/workernode"
)

// WorkerNodeDelete is the builder for deleting a WorkerNode entity.
type WorkerNodeDelete struct {
	config
	hooks    []Hook
	mutation *WorkerNodeMutation
}

// Where appends a list predicates to the WorkerNodeDelete builder.
func (wnd *WorkerNodeDelete) Where(ps ...predicate.WorkerNode) *WorkerNodeDelete {
	wnd.mutation.Where(ps...)
	return wnd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (wnd *WorkerNodeDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, wnd.sqlExec, wnd.mutation, wnd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (wnd *WorkerNodeDelete) ExecX(ctx context.Context) int {
	n, err := wnd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (wnd *WorkerNodeDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(workernode.Table, sqlgraph.NewFieldSpec(workernode.FieldID, field.TypeInt))
	if ps := wnd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, wnd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	wnd.mutation.done = true
	return affected, err
}

// WorkerNodeDeleteOne is the builder for deleting a single WorkerNode entity.
type WorkerNodeDeleteOne struct {
	wnd *WorkerNodeDelete
}

// Where appends a list predicates to the WorkerNodeDelete builder.
func (wndo *WorkerNodeDeleteOne) Where(ps ...predicate.WorkerNode) *WorkerNodeDeleteOne {
	wndo.wnd.mutation.Where(ps...)
	return wndo
}

// Exec executes the deletion query.
func (wndo *WorkerNodeDeleteOne) Exec(ctx context.Context) error {
	n, err := wndo.wnd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{workernode.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (wndo *WorkerNodeDeleteOne) ExecX(ctx context.Context) {
	if err := wndo.Exec(ctx); err != nil {
		panic(err)
	}
}
